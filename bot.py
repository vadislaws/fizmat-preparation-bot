from keep_alive import keep_alive
keep_alive()
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from config import BOT_TOKEN
from data_manager import load_tasks, load_users, save_users, load_tests
import random
# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_state = {}

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_state[user_id] = {"prev_menu": "start"}

    keyboard = [["üéØ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é –≤ 7 –∫–ª–∞—Å—Å"]]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ì–æ—Ç–æ–≤–æ! –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é –≤ –†–§–ú–® –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! üéØ\n"
        "–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è 7 –∫–ª–∞—Å—Å–∞ ‚Äî\n"
        "—Ä–∞–∑–¥–µ–ª—ã –¥–ª—è 8 –∏ 9 –∫–ª–∞—Å—Å–æ–≤ –ø–æ—è–≤—è—Ç—Å—è –ø–æ–∑–∂–µ. ‚è≥\n\n"
        "üëá –í—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
        reply_markup=markup
    )

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞
async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text
    print(f"[DEBUG] User: {user_id} | Text: {text} | Prev: {user_state.get(user_id, {}).get('prev_menu')} | Mode: {user_state.get(user_id, {}).get('mode')}")

    users_data = load_users()
    if str(user_id) not in users_data:
        users_data[str(user_id)] = {}

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        prev = user_state.get(user_id, {}).get("prev_menu")

        if prev == "start":
            keyboard = [["üéØ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é –≤ 7 –∫–ª–∞—Å—Å"]]
            markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("‚¨ÖÔ∏è", reply_markup=markup)
            user_state[user_id] = {"prev_menu": None, "mode": None}
            return

        elif prev == "main_menu":
            menu_buttons = [
                ["üìÇ –ó–∞–¥–∞—á–∏ –ø–æ —Ç–µ–º–∞–º", "üß™ –ü–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã"],
                ["üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", "üß† –ß—Ç–æ —Ä–µ—à–∞—Ç—å –¥–∞–ª—å—à–µ?"],
                ["üî• –ó–∞–¥–∞—á–∞ –¥–Ω—è", "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫–∑–∞–º–µ–Ω–µ"],
                ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
            ]
            markup = ReplyKeyboardMarkup(menu_buttons, resize_keyboard=True)
            await update.message.reply_text("‚¨ÖÔ∏è", reply_markup=markup)
            user_state[user_id] = {"prev_menu": "start", "mode": None}
            return

        elif prev == "topics":
            tasks = load_tasks()
            topic_buttons = [[topic.capitalize()] for topic in tasks.keys()]
            topic_buttons.append(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
            markup = ReplyKeyboardMarkup(topic_buttons, resize_keyboard=True)
            await update.message.reply_text("‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–µ–º—ã:", reply_markup=markup)

            user_state[user_id] = {
                "mode": "choosing_topic",
                "prev_menu": "main_menu"
            }
            return
    # --- –û–¢–ü–†–ê–í–ò–¢–¨ –û–¢–í–ï–¢ ---
    if text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç" and user_state.get(user_id, {}).get("mode") != "daily_solving" and user_state.get(user_id, {}).get("mode") != "daily_waiting":
        await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É:")
        user_state[user_id]["mode"] = "awaiting_answer"
        return

    # --- –û–ë–†–ê–ë–û–¢–ö–ê –í–í–û–î–ê –û–¢–í–ï–¢–ê ---
    if user_state.get(user_id, {}).get("mode") == "awaiting_answer":
        topic = user_state[user_id].get("topic")
        task_id = user_state[user_id].get("task_id")
        task_data = load_tasks().get(topic, {})
        task = next((t for t in task_data.get("tasks", []) if t["id"] == task_id), None)

        if task:
            if text.strip().lower() == task["answer"].strip().lower():
                await update.message.reply_text("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ üí™")
                user_state[user_id]["mode"] = "choosing_task"

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω—É—é (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å users_data)
                if topic not in users_data[str(user_id)]:
                    users_data[str(user_id)][topic] = {}
                users_data[str(user_id)][topic][str(task_id)] = "solved"
                save_users(users_data)


                # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á –ø–æ —Ç–µ–º–µ
                task_buttons = [[f"‚Ññ {t['id']}"] for t in task_data.get("tasks", [])]
                task_buttons.append(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
                markup = ReplyKeyboardMarkup(task_buttons, resize_keyboard=True)
                await update.message.reply_text(
                    f"üìö –¢–µ–º–∞: *{topic}*\n–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏:",
                    reply_markup=markup,
                    parse_mode="Markdown"
                )
            else:
                buttons = [["üîÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"], ["üßÆ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—à–µ–Ω–∏–µ"], ["üö´ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–µ —Ä–µ—à—ë–Ω–Ω—É—é"]]
                markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
                await update.message.reply_text(
                    "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑, –ø–æ—Å–º–æ—Ç—Ä–∏ —Ä–µ—à–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ—Ç—å –∫–∞–∫ –Ω–µ —Ä–µ—à—ë–Ω–Ω—É—é.",
                    reply_markup=markup
                )
                user_state[user_id]["mode"] = "after_wrong_answer"
        return
        # --- –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –í –†–ï–ñ–ò–ú–ï solving_task ---
    elif user_state.get(user_id, {}).get("mode") == "solving_task":
        topic = user_state[user_id].get("topic")
        task_id = user_state[user_id].get("task_id")
        task_data = load_tasks().get(topic, {})
        task = next((t for t in task_data.get("tasks", []) if t["id"] == task_id), None)

        if not task:
            await update.message.reply_text("‚ùó –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        if text == "üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ–º—ã":
            topic_explanation = task_data.get("explanation")
            if topic_explanation:
                await update.message.reply_text(f"üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ —Ç–µ–º–µ *{topic}*:\n{topic_explanation}", parse_mode="Markdown")
            else:
                await update.message.reply_text("üîç –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
            return

        elif text == "üßÆ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è":
            explanation = task.get("explanation", "‚ùó –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
            await update.message.reply_text(f"üßÆ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:\n{explanation}")
            return

    # --- –ü–û–°–õ–ï –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û–ì–û –û–¢–í–ï–¢–ê ---
    if user_state.get(user_id, {}).get("mode") == "after_wrong_answer":
        if text == "üîÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞":
            task_id = user_state[user_id].get("task_id")
            topic = user_state[user_id].get("topic")
            task_data = load_tasks().get(topic, {})
            task = next((t for t in task_data.get("tasks", []) if t["id"] == task_id), None)

            if task:
                buttons = [
                    ["üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ–º—ã", "üßÆ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è"],
                    ["‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç"],
                    ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
                ]
                markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
                await update.message.reply_text(
                    f"üìå –ó–∞–¥–∞—á–∞ {task['id']}:\n{task['question']}",
                    reply_markup=markup
                )
                user_state[user_id]["mode"] = "solving_task"
            return

        elif text == "üßÆ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—à–µ–Ω–∏–µ":
            topic = user_state[user_id].get("topic")
            task_id = user_state[user_id].get("task_id")
            task_data = load_tasks().get(topic, {})
            task = next((t for t in task_data.get("tasks", []) if t["id"] == task_id), None)

            if task:
                await update.message.reply_text(f"üìò –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:\n{task['explanation']}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–æ–≤–∞ —É—Å–ª–æ–≤–∏–µ –∏ –≤—ã–±–æ—Ä
                buttons = [
                    ["üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ–º—ã", "üßÆ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è"],
                    ["‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç"],
                    ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
                ]
                markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
                await update.message.reply_text(
                    f"üìå –ó–∞–¥–∞—á–∞ {task['id']}:\n{task['question']}",
                    reply_markup=markup
                )

                user_state[user_id]["mode"] = "solving_task"
                user_state[user_id]["topic"] = topic
                user_state[user_id]["task_id"] = task_id
            return


        elif text == "üö´ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–µ —Ä–µ—à—ë–Ω–Ω—É—é":
            topic = user_state[user_id].get("topic")
            task_id = str(user_state[user_id].get("task_id"))

        # ‚úÖ –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ —Ä–µ—à—ë–Ω–Ω—É—é
            if topic not in users_data[str(user_id)]:
                users_data[str(user_id)][topic] = {}
            users_data[str(user_id)][topic][task_id] = "failed"
            save_users(users_data)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å–Ω–æ–≤–∞
            task_data = load_tasks().get(topic, {})
            task_buttons = [[f"‚Ññ {t['id']}"] for t in task_data.get("tasks", [])]
            task_buttons.append(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
            markup = ReplyKeyboardMarkup(task_buttons, resize_keyboard=True)

            await update.message.reply_text(
                f"üìö –¢–µ–º–∞: *{topic}*\n–ó–∞–¥–∞—á–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é –∑–∞–¥–∞—á—É:",
                reply_markup=markup,
                parse_mode="Markdown"
            )
            user_state[user_id]["mode"] = "choosing_task"
            return

        

    # –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞
    if text == "üéØ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é –≤ 7 –∫–ª–∞—Å—Å":
        user_state[user_id] = {"prev_menu": "start"}
        menu_buttons = [
            ["üìÇ –ó–∞–¥–∞—á–∏ –ø–æ —Ç–µ–º–∞–º", "üß™ –ü–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã"],
            ["üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", "üß† –ß—Ç–æ —Ä–µ—à–∞—Ç—å –¥–∞–ª—å—à–µ?"],
            ["üî• –ó–∞–¥–∞—á–∞ –¥–Ω—è", "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫–∑–∞–º–µ–Ω–µ"],
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ]
        markup = ReplyKeyboardMarkup(menu_buttons, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏, —Å —á–µ–≥–æ –Ω–∞—á–Ω—ë–º:", reply_markup=markup)
    #–ü—Ä–æ—Ñ–∏–ª—å –ü—Ä–æ–≥—Ä–µ—Å—Å
    elif text == "üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å":
        profile = users_data.get(str(user_id), {})
        full_name = profile.get("full_name", "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        school = profile.get("school", "–®–∫–æ–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")

        msg = f"üë§ *–ü—Ä–æ—Ñ–∏–ª—å*\n\n"
        msg += f"*–§–ò–û:* {full_name}\n"
        msg += f"*–®–∫–æ–ª–∞:* {school}\n\n"
        # –ó–∞–¥–∞—á–∞ –¥–Ω—è ‚Äî Streak
        streak = profile.get("streak", {})
        current_streak = streak.get("current", 0)

        if current_streak > 0:
            bars = "üî•" * min(current_streak, 10)
            msg += f"*üî• –ó–∞–¥–∞—á–∞ –¥–Ω—è:*\n–¢—ã —Ä–µ—à–∞–ª {current_streak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥!\n{bars}\n\n"
        msg += "üìÇ *–ó–∞–¥–∞—á–∏ –ø–æ —Ç–µ–º–∞–º:*\n"
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–∞–º
        tasks = load_tasks()
        for topic, topic_data in tasks.items():
            user_topic_data = profile.get(topic, {})
            total = len(topic_data["tasks"])
            solved = sum(1 for v in user_topic_data.values() if v == "solved")
            failed = sum(1 for v in user_topic_data.values() if v == "failed")
            untouched = total - solved - failed

            green = solved * 10 // total
            red = failed * 10 // total
            white = 10 - green - red
            if solved > 0 and green == 0:
                green = 1
                white = max(white - 1, 0)
            # –°–º–∞–π–ª–∏–∫–∏: üü©‚¨úüü•
            bars = "üü©" * green
            bars += "‚¨ú" * white
            bars += "üü•" * red
           
            msg += f"*{topic}* ‚Äî —Ä–µ—à–µ–Ω–æ {solved}/{total}, –æ—à–∏–±–æ–∫ {failed}\n{bars}\n\n"

        # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ—Å—Ç–∞–º
        tests_data = load_tests()
        msg += "*üß™ –ü—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã:*\n"
        for test in tests_data["tests"]:
            test_id = str(test["id"])
            if test_id in profile.get("tests", {}):
                score = profile["tests"][test_id]["score"]
                bars = "üü©" * (score * 10 // 150)
                bars += "üü•" * (10 - len(bars))
                msg += f"{test['title']} ‚Äî {score}/150\n{bars}\n\n"

        # –ö–Ω–æ–ø–∫–∏
        buttons = [["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"]]
        markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
        user_state[user_id] = {
            "prev_menu": "main_menu",
            "mode": None
        }

        await update.message.reply_text(msg, parse_mode="Markdown", reply_markup=markup)

    
    elif text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å":
        user_state[user_id]["mode"] = "editing_profile_menu"
        buttons = [
            ["üìù –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û", "üè´ –ò–∑–º–µ–Ω–∏—Ç—å —à–∫–æ–ª—É"],
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ]
        markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
        await update.message.reply_text("–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=markup)

    elif text == "üìù –ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û":
        user_state[user_id]["mode"] = "editing_full_name"
        await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ—ë –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä: *–¢–∫–∞—á–µ–Ω–∫–æ –í–ª–∞–¥*)", parse_mode="Markdown")

    elif user_state.get(user_id, {}).get("mode") == "editing_full_name":
        users_data[str(user_id)]["full_name"] = text.strip()
        save_users(users_data)
        user_state[user_id]["mode"] = None
        await update.message.reply_text("‚úÖ –§–ò–û –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    elif text == "üè´ –ò–∑–º–µ–Ω–∏—Ç—å —à–∫–æ–ª—É":
        user_state[user_id]["mode"] = "editing_school"
        await update.message.reply_text("üè´ –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π —à–∫–æ–ª—ã: (–Ω–∞–ø—Ä–∏–º–µ—Ä: –†–§–ú–®)")

    elif user_state.get(user_id, {}).get("mode") == "editing_school":
        users_data[str(user_id)]["school"] = text.strip()
        save_users(users_data)
        user_state[user_id]["mode"] = None
        await update.message.reply_text("‚úÖ –®–∫–æ–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    

    # –ó–∞–¥–∞—á–∏ –ø–æ —Ç–µ–º–∞–º
    elif text == "üìÇ –ó–∞–¥–∞—á–∏ –ø–æ —Ç–µ–º–∞–º":
        tasks = load_tasks()
        topic_buttons = [[topic.capitalize()] for topic in tasks.keys()]
        topic_buttons.append(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
        markup = ReplyKeyboardMarkup(topic_buttons, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ç–µ–º—É:", reply_markup=markup)

        user_state[user_id] = {
            "mode": "choosing_topic",
            "prev_menu": "main_menu"
        }


    # –ò–Ω—Ñ–æ –æ–± —ç–∫–∑–∞–º–µ–Ω–µ
    elif text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫–∑–∞–º–µ–Ω–µ":
        user_state[user_id]["prev_menu"] = "start"
        await update.message.reply_text(
            "üìò *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–º —ç–∫–∑–∞–º–µ–Ω–µ –≤ –†–§–ú–®*\n\n"
            "*–§–æ—Ä–º–∞—Ç —ç–∫–∑–∞–º–µ–Ω–∞:*\n"
            "‚Äî –ü—Ä–µ–¥–º–µ—Ç—ã: *–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞* –∏ *–ª–æ–≥–∏–∫–∞*\n"
            "‚Äî –í—Ä–µ–º—è: *120 –º–∏–Ω—É—Ç*\n"
            "‚Äî –í—Å–µ –∑–∞–¥–∞—á–∏ ‚Äî *–æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Ç–∏–ø–∞* (–Ω—É–∂–Ω–æ –≤–ø–∏—Å–∞—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)\n"
            "‚Äî –†–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∑–∞ –∑–∞–¥–∞—á–∏ —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "  ‚Ä¢ 10 –∑–∞–¥–∞—á –ø–æ *3 –±–∞–ª–ª–∞*\n"
            "  ‚Ä¢ 10 –∑–∞–¥–∞—á –ø–æ *5 –±–∞–ª–ª–æ–≤*\n"
            "  ‚Ä¢ 10 –∑–∞–¥–∞—á –ø–æ *7 –±–∞–ª–ª–æ–≤*\n\n"
            "*–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª:* 150\n"
            "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ ‚Äî *0 –±–∞–ª–ª–æ–≤*\n\n"
            "üìÖ *–í–∞–∂–Ω—ã–µ –¥–∞—Ç—ã:*\n"
            "‚Äî 15 —è–Ω–≤–∞—Ä—è 2025 ‚Äî —Å—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–¥–æ 3 –∞–ø—Ä–µ–ª—è)\n"
            "‚Äî 27 –∞–ø—Ä–µ–ª—è 2025 ‚Äî *—ç–∫–∑–∞–º–µ–Ω –¥–ª—è 7 –∫–ª–∞—Å—Å–∞*\n\n"
            "üìç *–ì–æ—Ä–æ–¥–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:*\n"
            "–ê—Å—Ç–∞–Ω–∞, –ê–ª–º–∞—Ç—ã, –ê—Ç—ã—Ä–∞—É, –ê–∫—Ç–∞—É, –û—Ä–∞–ª, –¢—É—Ä–∫–µ—Å—Ç–∞–Ω, –®—ã–º–∫–µ–Ω—Ç",
            parse_mode="Markdown"
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
    elif user_state.get(user_id, {}).get("mode") == "choosing_topic":
        tasks = load_tasks()
        matched_topic = None
        for topic in tasks:
            if topic.lower() == text.lower():
                matched_topic = topic
                break

        if matched_topic:
            user_state[user_id] = {
                "mode": "choosing_task",
                "topic": matched_topic,
                "prev_menu": "topics"
            }

            # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–∞–ª–æ—á–µ–∫/–∫—Ä–µ—Å—Ç–∏–∫–æ–≤
            user_tasks = users_data.get(str(user_id), {}).get(matched_topic, {})
            task_buttons = []

            for t in tasks[matched_topic]["tasks"]:
                task_id_str = str(t["id"])
                mark = "‚ùì"
                if isinstance(user_tasks, dict):
                    if task_id_str in user_tasks and user_tasks[task_id_str] == "solved":
                        mark = "‚úÖ"
                    elif task_id_str in user_tasks and user_tasks[task_id_str] == "failed":
                        mark = "‚ùå"
                task_buttons.append([f"{mark} ‚Ññ {t['id']}"])

            task_buttons.append(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
            markup = ReplyKeyboardMarkup(task_buttons, resize_keyboard=True)

            await update.message.reply_text(
                f"üìö –¢–µ–º–∞: *{matched_topic}*\n–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏:",
                reply_markup=markup,
                parse_mode="Markdown"
            )
        else:
            await update.message.reply_text("–¢–∞–∫–æ–π —Ç–µ–º—ã –Ω–µ—Ç. –í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫.")
    # –í—ã–±–æ—Ä –∑–∞–¥–∞—á–∏
    elif user_state.get(user_id, {}).get("mode") == "choosing_task":
        topic = user_state[user_id]["topic"]
        task_id_text = text.replace("‚Ññ", "").strip()
        task_id_text = task_id_text.replace("‚úÖ", "").replace("‚ùå", "").replace("‚ùì", "").strip()  # <-- —Ñ–∏–∫—Å

        if task_id_text.isdigit():
            task_id = int(task_id_text)
            topic_data = load_tasks().get(topic, {})
            task = next((t for t in topic_data.get("tasks", []) if t["id"] == task_id), None)

            if task:
                buttons = [
                    ["üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ–º—ã", "üßÆ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è"],
                    ["‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç"],
                    ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
                ]
                markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)

                await update.message.reply_text(
                    f"üìå –ó–∞–¥–∞—á–∞ {task['id']}:\n{task['question']}",
                    reply_markup=markup
                )

                user_state[user_id]["mode"] = "solving_task"
                user_state[user_id]["task_id"] = task_id
                return

    elif text == "üß™ –ü–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã":
        tests_data = load_tests()
        user_tests = users_data.get(str(user_id), {}).get("tests", {})

        buttons = []
        for test in tests_data["tests"]:
            test_id = str(test["id"])
            score = user_tests.get(test_id, {}).get("score")
            title = test["title"]

            if score is not None:
                title += f" ({score}/150)"

            buttons.append([title])
        buttons.append(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])

        markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)

        user_state[user_id] = {
            "mode": "choosing_full_test",
            "prev_menu": "main_menu"
        }

        await update.message.reply_text("üìö –í—ã–±–µ—Ä–∏ —Ç–µ—Å—Ç –∏ –ø–æ–¥–æ–∂–¥–∏ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞", reply_markup=markup)

    elif user_state.get(user_id, {}).get("mode") == "choosing_full_test":
        tests_data = load_tests()
        clean_text = text.split(" (")[0]
        selected_test = next((test for test in tests_data["tests"] if test["title"] == clean_text), None)

        if selected_test:
            file_path = f"data/tests/{selected_test['file']}"
            try:
                with open(file_path, "rb") as f:
                    await update.message.reply_document(
                        document=f,
                        filename=selected_test["file"],
                        caption=f"üß™ *{selected_test['title']}*",
                        parse_mode="Markdown"
                    )
            except FileNotFoundError:
                await update.message.reply_text("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
                return

            user_state[user_id] = {
                "mode": "awaiting_test_answers",
                "test_id": selected_test["id"],
                "prev_menu": "main_menu"
            }

            markup = ReplyKeyboardMarkup([
                ["‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã"],
                ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
            ], resize_keyboard=True)
            await update.message.reply_text("üì• –ì–æ—Ç–æ–≤–æ. –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç—ã üëá", reply_markup=markup)


    elif text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã" and user_state.get(user_id, {}).get("mode") == "awaiting_test_answers":
        await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏ –≤—Å–µ 30 –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª \n (–Ω–∞–ø—Ä–∏–º–µ—Ä - 14 28 1/3 ...)")
        user_state[user_id]["mode"] = "awaiting_test_input"
        return

    elif user_state.get(user_id, {}).get("mode") == "awaiting_test_input":
        try:
            answers = text.strip().upper().split()
            if len(answers) != 30:
                await update.message.reply_text("‚ùó –û—Ç–≤–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å *—Ä–æ–≤–Ω–æ 30*. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", parse_mode="Markdown")
                return

            tests_data = load_tests()
            current_test_id = user_state[user_id]["test_id"]
            current_test = next((t for t in tests_data["tests"] if t["id"] == current_test_id), None)

            if not current_test:
                await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ç–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            correct = current_test["answers"]
            result = []
            correct_count = 0
            total_score = 0

            for i in range(30):
                if answers[i].strip().upper() == correct[i].strip().upper():
                    correct_count += 1
                    if i < 10:
                        total_score += 3
                    elif i < 20:
                        total_score += 5
                    else:
                        total_score += 7
                    result.append(f"{i+1}. ‚úÖ")
                else:
                    result.append(f"{i+1}. ‚ùå (—Ç–≤: {answers[i]} / –≤–µ—Ä–Ω: {correct[i]})")

            await update.message.reply_text(
                f"üéØ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_count}/30\n"
                f"üíØ –¢–≤–æ–π –±–∞–ª–ª: {total_score} –∏–∑ 150\n\n"
                + "\n".join(result)
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ users.json
            if "tests" not in users_data[str(user_id)]:
                users_data[str(user_id)]["tests"] = {}

            users_data[str(user_id)]["tests"][str(current_test_id)] = {
                "score": total_score,
                "correct": correct_count
            }
            save_users(users_data)

            user_state[user_id]["mode"] = "test_result"

            markup = ReplyKeyboardMarkup(
                [["üìå –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ"], ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]],
                resize_keyboard=True
            )
            await update.message.reply_text("üìã –í—ã–±–µ—Ä–∏, —á—Ç–æ –¥–∞–ª—å—à–µ:", reply_markup=markup)

        except Exception as e:
            print("[ERROR in test input]", e)
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

    elif text == "üìå –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ" and user_state.get(user_id, {}).get("mode") == "test_result":
        await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Ä–µ—à–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ , –Ω–æ –±–æ—Ç –∏—Ö –Ω–µ –∑–∞—Å—á–∏—Ç–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: `2 4 15`):", parse_mode="Markdown")
        user_state[user_id]["mode"] = "mark_test_correction"
        return

    elif user_state.get(user_id, {}).get("mode") == "mark_test_correction":
        try:
            indexes = list(map(int, text.strip().split()))
            current_test_id = user_state[user_id]["test_id"]
            tests_data = load_tests()
            current_test = next((t for t in tests_data["tests"] if t["id"] == current_test_id), None)

            if not current_test:
                await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–µ—Å—Ç–∞.")
                return

            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–ª—ã
            corrected = users_data[str(user_id)]["tests"][str(current_test_id)]
            already_correct = corrected["correct"]
            new_correct = 0
            added_score = 0

            for i in indexes:
                if i < 1 or i > 30:
                    continue
                if i <= 10:
                    added_score += 3
                elif i <= 20:
                    added_score += 5
                else:
                    added_score += 7
                new_correct += 1

            corrected["score"] += added_score
            corrected["correct"] += new_correct
            save_users(users_data)

            user_state[user_id]["mode"] = "test_result"
            await update.message.reply_text(
                f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ!\nüéØ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {corrected['correct']}/30\nüíØ –ë–∞–ª–ª: {corrected['score']} –∏–∑ 150",
                reply_markup=ReplyKeyboardMarkup([["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]], resize_keyboard=True)
            )

        except Exception as e:
            print("[ERROR in correction]", e)
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")

    elif text == "üß† –ß—Ç–æ —Ä–µ—à–∞—Ç—å –¥–∞–ª—å—à–µ?":
        from datetime import datetime
        tasks = load_tasks()
        profile = users_data.get(str(user_id), {})

        topic_scores = {}

        for topic, data in tasks.items():
            user_topic = profile.get(topic, {})
            solved = sum(1 for v in user_topic.values() if v == "solved")
            failed = sum(1 for v in user_topic.values() if v == "failed")
            total = len(data["tasks"])
            progress = (solved + failed) / total if total else 0

            score = 0
            if failed > 0:
                score += 2
            if progress < 0.5:
                score += 1
            score += data.get("weight", 1.0)

            topic_scores[topic] = score

        scores = sorted(topic_scores.items(), key=lambda x: -x[1])

        # –ü–æ–¥—Å—á—ë—Ç —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –∏ —Ç–µ–º
        total_tasks_done = 0
        unique_topics_solved = set()
        for topic_name, topic_data in tasks.items():
            user_topic = profile.get(topic_name, {})
            for task in topic_data["tasks"]:
                if user_topic.get(str(task["id"])) == "solved":
                    total_tasks_done += 1
                    unique_topics_solved.add(topic_name)

        tests_done = len(profile.get("tests", {}))

        encouraging = ""
        if total_tasks_done >= 25:
            encouraging = f"–¢—ã —Ä–µ—à–∏–ª —É–∂–µ *{total_tasks_done} –∑–∞–¥–∞—á* –ø–æ *{len(unique_topics_solved)} —Ç–µ–º–∞–º* ‚Äì üî• —Ç—ã –±–æ–ª—å—à–æ–π –º–æ–ª–æ–¥–µ—Ü!"
        elif total_tasks_done >= 10:
            encouraging = f"–£–∂–µ *{total_tasks_done} –∑–∞–¥–∞—á* –ø–æ *{len(unique_topics_solved)} —Ç–µ–º–∞–º* –∑–∞ –ø–ª–µ—á–∞–º–∏ ‚Äì –∫—Ä—É—Ç–æ–µ –Ω–∞—á–∞–ª–æ! üí™"
        else:
            encouraging = f"–¢—ã –ø–æ–∫–∞ —Ä–µ—à–∏–ª *{total_tasks_done} –∑–∞–¥–∞—á* ‚Äì –∏ —ç—Ç–æ —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—Ç. –î–∞–ª—å—à–µ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –∫—Ä—É—á–µ! üôå"

        top_topic, top_score = scores[0]
        failed = sum(1 for v in profile.get(top_topic, {}).values() if v == "failed")
        progress = len(profile.get(top_topic, {})) / len(tasks[top_topic]["tasks"])

        if failed > 0:
            reason = f"–í —ç—Ç–æ–π —Ç–µ–º–µ —É —Ç–µ–±—è –±—ã–ª–∏ –æ—à–∏–±–∫–∏ ‚Äì –≤–∞–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ —ç–∫–∑–∞–º–µ–Ω–æ–º."
        elif progress < 0.3:
            reason = f"–¢—ã –ø–æ—á—Ç–∏ –Ω–µ —Ä–µ—à–∞–ª –∑–∞–¥–∞—á–∏ –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ ‚Äì –ø–æ—Ä–∞ –≤–æ—Å–ø–æ–ª–Ω–∏—Ç—å!"
        else:
            reason = f"–¢—ã —É–∂–µ –Ω–µ–º–Ω–æ–≥–æ —Ä–µ—à–∞–ª —ç—Ç—É —Ç–µ–º—É ‚Äì –ø—Ä–æ–¥–æ–ª–∂–∞–π, —á—Ç–æ–±—ã –∑–∞–∫—Ä–µ–ø–∏—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å üí°"

        test_hint = ""
        if tests_done == 0:
            test_hint = "\n\nüß™ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* –ù–∞—á–Ω–∏ —Å –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ ‚Äî –æ–Ω –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —ç–∫–∑–∞–º–µ–Ω–∞."
        elif tests_done >= 3:
            test_hint = "\n\nüìò *–°–æ–≤–µ—Ç:* –í—Å–µ –ø—Ä–æ–±–Ω–∏–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã. –°–æ–≤–µ—Ç—É—é –¥–æ–∫—É–ø–∏—Ç—å –æ—Ñ. –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞ —Å–∞–π—Ç–µ –†–§–ú–®!"

        await update.message.reply_text(
            f"{encouraging}\n\n"
            f"üéØ *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ç–µ–º–∞:*\nüëâ *{top_topic}*\n\n"
            f"üìå –ü–æ—á–µ–º—É: {reason}{test_hint}",
            parse_mode="Markdown"
        )
    elif text == "üî• –ó–∞–¥–∞—á–∞ –¥–Ω—è":
        from datetime import datetime
        today = datetime.now().strftime("%Y-%m-%d")

        if "daily_task" not in user_state or user_state["daily_task"].get("date") != today:
            tasks = load_tasks()
            all_tasks = []
            for topic, data in tasks.items():
                for task in data["tasks"]:
                    all_tasks.append({
                        "topic": topic,
                        "id": task["id"],
                        "question": task["question"],
                        "answer": task["answer"],
                        "explanation": task["explanation"]
                    })
            chosen = random.choice(all_tasks)
            user_state["daily_task"] = {
                "date": today,
                "task": chosen,
                "answered": False
            }

        chosen = user_state["daily_task"]["task"]
        user_state[user_id] = {
            "mode": "daily_solving",
            "prev_menu": "main_menu",
            "daily_task": chosen
        }

        buttons = [
            ["üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ–º—ã", "üßÆ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è"],
            ["‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç"],
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ]
        markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)

        await update.message.reply_text(
            f"üìÖ *–ó–∞–¥–∞—á–∞ –¥–Ω—è*\n\n"
            f"–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –æ–¥–Ω—É —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É. –†–µ—à–∏ –µ—ë, —á—Ç–æ–±—ã –ø—Ä–æ–∫–∞—á–∞—Ç—å streak –∏ –ø–æ–ø–∞—Å—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –ª—É—á—à–∏—Ö! üî•\n\n"
            f"*–¢–µ–º–∞:* {chosen['topic']}\n\nüìå {chosen['question']}",
            parse_mode="Markdown",
            reply_markup=markup
        )

    elif user_state.get(user_id, {}).get("mode") == "daily_solving":
        if text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç":
            await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç:")
            user_state[user_id]["mode"] = "daily_waiting"
            return
        elif text == "üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ–º—ã":
            topic = user_state[user_id]["daily_task"]["topic"]
            explanation = load_tasks().get(topic, {}).get("explanation")
            await update.message.reply_text(f"üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ —Ç–µ–º–µ *{topic}*:\n{explanation or '–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.'}", parse_mode="Markdown")
            return
        elif text == "üßÆ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è":
            explanation = user_state[user_id]["daily_task"]["explanation"]
            await update.message.reply_text(f"üßÆ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:\n{explanation}")
            return

    elif user_state.get(user_id, {}).get("mode") == "daily_waiting":
        task = user_state[user_id]["daily_task"]
        topic = task["topic"]
        task_id = str(task["id"])

        if text == "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç":
            await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç:")
            return
        elif text == "üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ–º—ã":
            explanation = load_tasks().get(topic, {}).get("explanation")
            await update.message.reply_text(f"üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ —Ç–µ–º–µ *{topic}*:\n{explanation or '–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.'}", parse_mode="Markdown")
            return
        elif text == "üßÆ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è":
            await update.message.reply_text(f"üßÆ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:\n{task['explanation']}")
            return
        elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            markup = ReplyKeyboardMarkup([
                ["üìÇ –ó–∞–¥–∞—á–∏ –ø–æ —Ç–µ–º–∞–º", "üß™ –ü–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã"],
                ["üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", "üß† –ß—Ç–æ —Ä–µ—à–∞—Ç—å –¥–∞–ª—å—à–µ?"],
                ["üî• –ó–∞–¥–∞—á–∞ –¥–Ω—è", "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫–∑–∞–º–µ–Ω–µ"],
                ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
            ], resize_keyboard=True)
            await update.message.reply_text("‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", reply_markup=markup)
            user_state[user_id] = {"mode": None, "prev_menu": "start"}
            return

        if text.strip().lower() == task["answer"].strip().lower():
            await update.message.reply_text("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ üí™")
            from datetime import datetime, timedelta
            today = datetime.now().strftime("%Y-%m-%d")
            profile = users_data.get(str(user_id), {})
            streak_data = profile.get("streak", {})

            if streak_data.get("last_solved") != today:
                yesterday = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
                streak = streak_data.get("current", 0) + 1 if streak_data.get("last_solved") == yesterday else 1
                profile["streak"] = {"current": streak, "last_solved": today}
                users_data[str(user_id)] = profile

            if topic not in users_data[str(user_id)]:
                users_data[str(user_id)][topic] = {}
            users_data[str(user_id)][topic][task_id] = "solved"
            save_users(users_data)

            buttons = [
                ["üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ–º—ã", "üßÆ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è"],
                ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
            ]
            markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
            await update.message.reply_text("üß† –•–æ—á–µ—à—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≥–ª—É–±–∂–µ? –í—ã–±–µ—Ä–∏, —á—Ç–æ –¥–∞–ª—å—à–µ:", reply_markup=markup)
            user_state[user_id]["mode"] = "daily_after_correct"
        else:
            markup = ReplyKeyboardMarkup([
                ["üîÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "üßÆ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è"],
                ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
            ], resize_keyboard=True)
            await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏ —Ä–µ—à–µ–Ω–∏–µ.", reply_markup=markup)
            user_state[user_id]["mode"] = "daily_wrong"
        return

    elif user_state.get(user_id, {}).get("mode") == "daily_wrong":
        task = user_state[user_id]["daily_task"]
        if text == "üîÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞":
            user_state[user_id]["mode"] = "daily_solving"
            buttons = [
                ["üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ–º—ã", "üßÆ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è"],
                ["‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç"],
                ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
            ]
            markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
            await update.message.reply_text(f"üìå –ó–∞–¥–∞—á–∞ –¥–Ω—è:\n{task['question']}", reply_markup=markup)
            return
        elif text == "üßÆ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è":
            await update.message.reply_text(f"üßÆ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:\n{task['explanation']}")
            return

    elif user_state.get(user_id, {}).get("mode") == "daily_after_correct":
        if text == "üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ–º—ã":
            topic = user_state[user_id]["daily_task"]["topic"]
            explanation = load_tasks().get(topic, {}).get("explanation")
            await update.message.reply_text(f"üß† –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ —Ç–µ–º–µ *{topic}*:\n{explanation or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.'}", parse_mode="Markdown")
            return
        elif text == "üßÆ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è":
            await update.message.reply_text(f"üßÆ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:\n{user_state[user_id]['daily_task']['explanation']}")
            return
       

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã 
async def handle_topic_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ—Ç –ª–∏ –±–æ—Ç –≤—ã–±–æ—Ä —Ç–µ–º—ã
    if user_state.get(user_id, {}).get("mode") != "choosing_topic":
        return

    tasks = load_tasks()
    matched_topic = None

    for topic in tasks:
        if topic.lower() == text.lower():
            matched_topic = topic
            break

    if matched_topic:
        user_state[user_id] = {
            "mode": "choosing_task",
            "topic": matched_topic,
            "prev_menu": "topics"
        }

        task_buttons = [[f"‚Ññ {task['id']}"] for task in tasks[matched_topic]["tasks"]]
        task_buttons.append(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
        markup = ReplyKeyboardMarkup(task_buttons, resize_keyboard=True)

        await update.message.reply_text(
            f"üìö –¢–µ–º–∞: *{matched_topic}*\n–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏:",
            reply_markup=markup,
            parse_mode="Markdown"
        )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu))
    app.run_polling()

if __name__ == "__main__":
    main()
